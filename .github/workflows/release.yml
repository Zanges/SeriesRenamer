# .github/workflows/release.yml

name: Create Release

# This workflow is triggered manually from the Actions tab.
on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'The type of version bump to perform, or "none" to use the current version.'
        required: true
        type: choice
        options:
          - none
          - patch
          - minor
          - major

jobs:
  # This job determines the version tag to use for the release.
  # If a version bump is selected, it bumps the version in Cargo.toml,
  # commits the change, and creates a new git tag.
  prepare_release_tag:
    name: Prepare Release Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to push commits and tags
    outputs:
      version_tag: ${{ steps.set_version.outputs.version_tag }} # Output the tag for other jobs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      - name: Bump version, commit, and tag
        if: github.event.inputs.bump != 'none'
        id: bump_version
        run: |
          # Read the current version from Cargo.toml
          current_version=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $current_version"

          # Split version into components
          major=$(echo $current_version | cut -d. -f1)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          # Get the bump type from the input
          bump_type=${{ github.event.inputs.bump }}

          # Calculate the new version
          if [ "$bump_type" == "patch" ]; then
            patch=$((patch + 1))
          elif [ "$bump_type" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          elif [ "$bump_type" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          fi

          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          
          # Set the new version tag as an output for this step
          echo "version_tag=v$new_version" >> $GITHUB_OUTPUT

          # Update version in Cargo.toml
          sed -i 's/^version = ".*"/version = "'"$new_version"'"/' Cargo.toml
          
          # Configure Git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Commit and Push changes
          git add Cargo.toml
          git commit -m "Bump version to v$new_version"
          git push
          
          # Create and Push Tag
          git tag "v$new_version"
          git push origin "v$new_version"

      - name: Get current version tag
        if: github.event.inputs.bump == 'none'
        id: get_current_version
        run: |
          current_version=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version is $current_version"
          echo "version_tag=v$current_version" >> $GITHUB_OUTPUT

      - name: Set final version tag output
        id: set_version
        run: |
          # Sets the final job output based on whether a bump was performed or not.
          final_tag="${{ steps.bump_version.outputs.version_tag || steps.get_current_version.outputs.version_tag }}"
          echo "Final version tag for release is $final_tag"
          echo "version_tag=$final_tag" >> $GITHUB_OUTPUT

  # This job builds the application for different operating systems.
  build-release:
    name: Build Release Binaries
    # It will only run after the 'prepare_release_tag' job has successfully completed.
    needs: prepare_release_tag
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Build for the native architecture of each runner for stability.
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: series-renamer-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: series-renamer-windows-x86_64.zip
          - os: macos-latest
            target: aarch64-apple-darwin # Native Apple Silicon
            asset_name: series-renamer-macos-aarch64.tar.gz

    steps:
      - name: Checkout repository at the new tag
        uses: actions/checkout@v4
        with:
          # Check out the specific tag determined in the previous job
          ref: ${{ needs.prepare_release_tag.outputs.version_tag }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev pkg-config

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Package for Linux/macOS
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/series_renamer release/
          tar -czf ${{ matrix.asset_name }} -C release .

      - name: Package for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/series_renamer.exe release/
          7z a ${{ matrix.asset_name }} ./release/*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  # This job creates the GitHub Release and uploads the compiled binaries.
  create-release:
    name: Create GitHub Release
    # It runs only after all the builds are complete.
    needs: [prepare_release_tag, build-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          # The path where artifacts will be downloaded.
          path: artifacts

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          # By default, this action will fail if a release for the tag already exists.
          # This prevents creating a duplicate release when bump is set to 'none'.
          makeLatest: true
          artifacts: "artifacts/*/*"
          # The tag name is passed from the first job.
          tag: ${{ needs.prepare_release_tag.outputs.version_tag }}
          # The GITHUB_TOKEN is automatically provided by GitHub.
          token: ${{ secrets.GITHUB_TOKEN }}
